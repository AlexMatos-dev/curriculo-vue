openapi: 3.0.3
info:
  title: Swagger InfoIJobs - OpenAPI 3.0
  description: |-
    InfoIJobs

    To send requests with custom data, use only the "Request Body" but beware, the swagger behaves strangely on execute and possible will not request correctly.
    Check the parameters and schemas as reference, DO NOT try to use the swagger to create new data

    Some useful links:
    - [Back end repository](https://github.com/jobifull/jobifull-app-backend)
  termsOfService: http://swagger.io/terms/
  contact:
    email: nickolasbini@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost/
tags:
  - name: auth
    description: Authentication routes and methods
paths:
  /api/login:
    post:
      tags:
        - auth
      summary: Perform login to retrieve a token
      description: Get a JWT via given credentials
      parameters:
        - name: email
          in: query
          description: Person email
          required: true
          example: person@email.com
          schema:
            type: string
        - name: password
          in: query
          description: Person password
          required: true
          example: password
          schema:
            type: string
        - name: personType
          in: query
          description: Either professional, recruiter or company | This saves the last entry login type
          schema:
            type: string
      requestBody:
        description: Perform login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginWithSuccess'
        '400':
          description: Parameters missing or invalid
          content:
            application/json:
              example:
                message: invalid email
        '401':
          description: Invalid credentials
          content:
            aplication/json:
              example: 
                message: invalid credentials
  /api/auth/register:
    post:
      tags:
        - auth
      summary: Creates a new person account
      parameters:
        - name: person_name
          in: query
          description: Person name
          required: true
          example: john
          schema:
            type: string
        - name: person_email
          in: query
          description: Person email
          required: true
          example: person@email.com
          schema:
            type: string
        - name: person_password
          in: query
          description: Person password - An uppercase and lowecase character, a number, a special character and more than 6 character length
          required: true
          example: myPassword
          schema:
            type: string
        - name: person_langue
          in: query
          description: Person language
          required: true
          example: 1
          schema:
            type: integer
        - name: person_ddi
          in: query
          description: Person ddi
          schema:
            type: string
        - name: person_phone
          in: query
          description: Person phone
          schema:
            type: string
      requestBody:
        description: Perform login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPerson'
        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginWithSuccess'
        '400':
          description: Invalid sent parameters or language not found
          content:
            application/json:
              examples:
                Parameters:
                  value:
                    message: The person email field must be a valid email address. (dynamic response)
                Language:
                  value:
                    message: language not found
        '500':
          description: Person not registred on server
          content:
            application/json:
              example:
                data: person not created
  /api/auth/profile:
    post:
      tags:
        - auth
      summary: Get the authenticated User
      parameters:
        - in: header
          name: Bearer
          schema:
            type: string
            format: uuid
            example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJI
          required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonObject'
        '401':
          description: Authentication error
          content:
            application/json:
              examples:
                no token:
                  value:
                    message: token not provided
                  summary: No token provided
                invalid token:
                  value:
                    message: invalid token
                  summary: Token is not valid

  /api/requestchangepassword:
    post:
      tags:
        - auth
      summary: Request a change password code which will be sent to logged Person email
      parameters:
        - in: query
          name: email
          schema:
            type: string
            example: emailToReceiveEmail@email.com
          required: true
      responses:
        '200':
          description: Email containing password change code sent
          content:
            application/json:
              example: {"message": "email sent"}
        '500':
          description: Authentication error
          content:
            application/json:
              example: {"message": "email not sent"}
  /api/changepassword:
    post:
      tags:
        - auth
      summary: Changes logged Person password. Code will only be usable once
      parameters:
        - in: query
          name: email
          schema:
            type: string
            example: emailOfPerson@email.com
          required: true
        - name: code
          in: query
          description: The received code at email
          required: true
          example: 123456
          schema:
            type: string
        - name: newPassword
          in: query
          description: Person new password
          required: true
          example: Password1@
          schema:
            type: string
      # requestBody:
      #   description: Change password
      #   content:
      #     application/json:
      #       schema:
      #         $ref: '#/components/schemas/ChangePassword'
      #   required: true
      responses:
        '200':
          description: Person password was updated
          content:
            application/json:
              example: {"message": "password updated"}
        '400':
          description: Save error
          content:
            application/json:
              examples: 
                invalid code:
                  value:
                    message: invalid code
                  summary: Code is invalid
                invalid password:
                  value:
                    message: invalid password
                  summary: The password does not match requirements (An uppercase and lowecase character, a number, a special character and more than 6 character length)
        '500':
          description: Save error
          content:
            application/json:
              example: {"message": "password not saved"}  
  /api/joblist/index:
    get:
      tags:
        - joblist
      summary: List all jobs
      description: retrieves a list of job with optional filters.
      parameters:
        - name: job_model
          in: query
          description: search for the given model
          example: Remote
          schema:
            type: string
        - name: job_country
          in: query
          description: search for the given country ID
          example: 3
          schema:
            type: integer
        - name: job_city
          in: query
          description: search for the given city ID
          example: 3
          schema:
            type: integer
        - name: job_seniority
          in: query
          description: search for the given technicar level
          example: Intern
          schema:
            type: string
        - name: job_salary_start
          in: query
          description: search for the given starting salary
          example: 1527.20
          schema:
            type: float
        - name: job_salary_end
          in: query
          description: search for the given ending salary
          example: 2700.20
          schema:
            type: float
        - name: job_skills
          in: query
          description: search for the given skills
          example: 3
          schema:
            type: string
        - name: job_english_level
          in: query
          description: search for the given english level
          example: Fluent
          schema:
            type: string
        - name: job_experience
          in: query
          description: search for the given experience
          example: +2 years how backend developer
          schema:
            type: string
      responses:
        '200':
          description: A list of job
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobList'
  /api/joblist/show:
    get:
      tags:
        - joblist
      summary: Search for job
      description: Search for a specific vacancy by ID
      parameters:
        - name: job_id
          in: query
          description: Job ID
          required: true
          example: 8
          schema:
            type: integer
      responses:
        '200':
          description: Vacant job found successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobList'
        '404':
          description: Vacant job not found.
  /api/joblist/store:
    post:
      tags:
        - joblist
      summary: Create a new job
      parameters:
        - name: company_id
          in: query
          description: Company ID
          required: true
          example: 8
          schema:
            type: integer
        - name: job_model
          in: query
          description: Work Model
          required: true
          example: remote
          schema:
            type: string
        - name: job_country
          in: query
          description: Work country
          required: true
          example: 10
          schema:
            type: integer
        - name: job_city
          in: query
          description: Work city
          required: true
          example: 15
          schema:
            type: integer
        - name: job_seniority
          in: query
          description: technical level required
          required: true
          example: Intern
          schema:
            type: string
        - name: job_salary
          in: query
          description: Work Payment
          required: true
          example: 7200.52
          schema:
            type: float
        - name: job_model
          in: query
          description: Work Model
          required: true
          example: remote
          schema:
            type: string
        - name: job_description
          in: query
          description: Work desctiption
          required: true
          example: We need a person who knows advanced flutter
          schema:
            type: string
        - name: job_skills
          in: query
          description: Work skills required
          required: true
          example: PHP, Laravel, JavaScript, React
          schema:
            type: string
        - name: job_english_level
          in: query
          description: English level
          required: true
          example: Fluent
          schema:
            type: string
        - name: job_experience
          in: query
          description: Time experience
          required: true
          example: 2+ As backend developer
          schema:
            type: string
        - name: job_benefits
          in: query
          description: Benefits offered
          required: true
          example: food voucher and home office
          schema:
            type: string
      requestBody:
        required: true
        content: 
          application/json:
      responses:
        '201':
          description: Vacant job created successfully.
        '400':
          description: Field entered incorrectly.
          content:
            application/json:
  /api/joblist/update:
    put:
      tags:
        - joblist
      summary: Update a job by ID
      parameters:
        - name: company_id
          in: query
          description: Company ID
          example: 8
          schema:
            type: integer
        - name: job_model
          in: query
          description: Work Model
          example: remote
          schema:
            type: string
        - name: job_country
          in: query
          description: Work country
          example: 10
          schema:
            type: integer
        - name: job_city
          in: query
          description: Work city
          example: 15
          schema:
            type: integer
        - name: job_seniority
          in: query
          description: technical level required
          example: Intern
          schema:
            type: string
        - name: job_salary
          in: query
          description: Work Payment
          example: 7200.52
          schema:
            type: float
        - name: job_model
          in: query
          description: Work Model
          example: remote
          schema:
            type: string
        - name: job_description
          in: query
          description: Work desctiption
          example: We need a person who knows advanced flutter
          schema:
            type: string
        - name: job_skills
          in: query
          description: Work skills required
          example: PHP, Laravel, JavaScript, React
          schema:
            type: string
        - name: job_english_level
          in: query
          description: English level
          example: Fluent
          schema:
            type: string
        - name: job_experience
          in: query
          description: Time experience
          example: 2+ As backend developer
          schema:
            type: string
        - name: job_benefits
          in: query
          description: Benefits offered
          example: food voucher and home office
          schema:
            type: string
      requestBody:
        required: true
        content: 
          application/json:
      responses:
        '201':
          description: Vacant job created successfully.
        '400':
          description: Field entered incorrectly.
          content:
            application/json:
  /api/joblist/destroy:
    post:
      tags:
        - joblist
      summary: Delete a job
      description: Delete a specific job by ID
      parameters:
        - name: job_id
          in: query
          description: Job ID
          required: true
          example: 8
          schema:
            type: integer
      responses:
        '200':
          description: Vacant job deleted sucessfully.
        '404':
          description: Vacant job not found.
          
components:
  schemas:
    Login:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: person@email.com
        password:
          type: string
          example: MyPassword
        personType:
          type: string
          enum:
            - professional
            - recruiter
            - company
    RegisterPerson:
      required:
        - person_name
        - person_email
        - person_password
        - person_langue
        - person_ddi
        - person_phone
      type: object
      properties:
        person_name:
          type: string
          example: john
        person_email:
          type: string
          example: person@email.com
        person_password:
          type: string
          example: MyPassword
        person_langue:
          type: integer
          example: 1
        person_ddi:
          type: string
          example: 41
        person_phone:
          type: string
          example: 987654321
    LoginWithSuccess:
      type: object
      properties:
        access_token:
          type: string
          example: XAiOiJKV1QiLCJh
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600
        lastLogin:
          type: string
          enum:
            - ''
            - professional
            - recruiter
            - company
    ChangePassword:
      required:
        - code
        - newPassword
      type: object
      properties:
        code:
          type: string
          example: person@email.com
        newPassword:
          type: string
          example: Password1@
          pattern: /[a-z]/,/[A-Z]/,/[0-9]/,/[@$!%*#?&]/
          description: An uppercase and lowecase character, a number, a special character and more than 6 character length
    PersonObject:
      required:
        - test
      type: object
      properties:
        person_id:
          type: integer
          example: 1
        person_username:
          type: string
          example: john
          maxLength: 300
        email:
          type: string
          example: person@email.com
          maxLength: 200
          uniqueItems: true
        password:
          type: string
          example: MyPassword
          maxLength: 80
          minimum: 6
          pattern: /[a-z]/,/[A-Z]/,/[0-9]/,/[@$!%*#?&]/
          description: An uppercase and lowecase character, a number, a special character and more than 6 character length
        person_ddi:
          type: string
          example: '41'
          maxLength: 10
        person_phone:
          type: string
          example: '999999999'
          maxLength: 20
        person_langue:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
