openapi: 3.0.3
info:
  title: Swagger InfoIJobs - OpenAPI 3.0
  description: |-
    InfoIJobs

    To send requests with custom data, use only the "Request Body" but beware, the swagger behaves strangely on execute and possible will not request correctly.
    Check the parameters and schemas as reference, DO NOT try to use the swagger to create new data

    Some useful links:
    - [Back end repository](https://github.com/jobifull/jobifull-app-backend)


    API responses have a pattern:
    ---------------------------------------------------
    Sucesso ->
    status: 200
    data: Informação retornada

    Erro na passagem de parâmetros ->
    status: 400
    message: Descrição do status

    Erro de Autenticação ->
    status: 401
    message: Descrição do status

    Erro de Permissão ->
    status: 403
    message: Descrição do status

    Não encontrado ->
    status: 404
    message: Descrição do status

    Erro no sistema ->
    status: 500
    message: Descrição do erro
    ---------------------------------------------------
    All request different than "GET" methods must include a Bearer token!
    ---------------------------------------------------
    Except:   /api/login  &  /api/register
    ---------------------------------------------------

  termsOfService: http://swagger.io/terms/
  contact:
    email: nickolasbini@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://api.jobifull.eu/
tags:
  - name: auth
    description: Authentication routes and methods
  - name: person
    description: Person routes and methods
  - name: professional
    description: Professional routes and methods
  - name: company
    description: Company routes and methods
  - name: recruiter
    description: Recruiter routes and methods
  - name: joblist
    description: Job routes and methods
  - name: curriculum
    description: Curriculum routes and methods
  - name: skill - curriculum
    description: Skill routes and methods
  - name: visa - curriculum
    description: Visa routes and methods
  - name: link - curriculum
    description: Link routes and methods
  - name: commom_currency
    description: Common currency routes and methods
  - name: job_applied
    description: Job applied routes and methods
  - name: chat_message
    description: Chat message routes and methods
paths:
  /api/login:
    post:
      tags:
        - auth
      summary: Perform login to retrieve a token
      description: Get a JWT via given credentials
      parameters:
        - name: email
          in: query
          description: Person email
          required: true
          example: person@email.com
          schema:
            type: string
        - name: password
          in: query
          description: Person password
          required: true
          example: password
          schema:
            type: string
        - name: personType
          in: query
          description: Either professional, recruiter or company | This saves the last entry login type
          schema:
            type: string
      requestBody:
        description: Perform login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginWithSuccess'
        '400':
          description: Parameters missing or invalid
          content:
            application/json:
              example:
                message: invalid email
        '401':
          description: Invalid credentials
          content:
            aplication/json:
              example:
                message: invalid credentials
  /api/register:
    post:
      tags:
        - auth
      summary: Creates a new person account
      parameters:
        - name: person_username
          in: query
          description: Person name
          required: true
          example: john
          schema:
            type: string
        - name: person_email
          in: query
          description: Person email
          required: true
          example: person@email.com
          schema:
            type: string
        - name: person_password
          in: query
          description: Person password - An uppercase and lowecase character, a number, a special character and more than 6 character length
          required: true
          example: myPassword
          schema:
            type: string
        - name: person_langue
          in: query
          description: Person language
          required: true
          example: 1
          schema:
            type: integer
        - name: person_ddi
          in: query
          description: Person ddi
          schema:
            type: string
        - name: person_phone
          in: query
          description: Person phone
          schema:
            type: string
      requestBody:
        description: Perform login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPerson'
        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginWithSuccess'
        '400':
          description: Invalid sent parameters or language not found
          content:
            application/json:
              examples:
                Parameters:
                  value:
                    message: The person email field must be a valid email address. (dynamic response)
                Language:
                  value:
                    message: language not found
        '500':
          description: Person not registred on server
          content:
            application/json:
              example:
                data: person not created
  /api/profile:
    post:
      tags:
        - auth
      summary: Get the authenticated User
      parameters:
        - in: header
          name: Bearer
          schema:
            type: string
            format: uuid
            example: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJI
          required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiles'
        '401':
          description: Authentication error
          content:
            application/json:
              examples:
                no token:
                  value:
                    message: token not provided
                  summary: No token provided
                invalid token:
                  value:
                    message: invalid token
                  summary: Token is not valid

  /api/requestchangepassword:
    post:
      tags:
        - auth
      summary: Request a change password code which will be sent to logged Person email
      parameters:
        - in: query
          name: email
          schema:
            type: string
            example: emailToReceiveEmail@email.com
          required: true
      responses:
        '200':
          description: Email containing password change code sent
          content:
            application/json:
              example: {"message": "email sent"}
        '500':
          description: Authentication error
          content:
            application/json:
              example: {"message": "email not sent"}
  /api/changepassword:
    post:
      tags:
        - auth
      summary: Changes logged Person password. Code will only be usable once
      parameters:
        - in: query
          name: email
          schema:
            type: string
            example: emailOfPerson@email.com
          required: true
        - name: code
          in: query
          description: The received code at email
          required: true
          example: 123456
          schema:
            type: string
        - name: newPassword
          in: query
          description: Person new password
          required: true
          example: Password1@
          schema:
            type: string
      # requestBody:
      #   description: Change password
      #   content:
      #     application/json:
      #       schema:
      #         $ref: '#/components/schemas/ChangePassword'
      #   required: true
      responses:
        '200':
          description: Person password was updated
          content:
            application/json:
              example: {"message": "password updated"}
        '400':
          description: Save error
          content:
            application/json:
              examples:
                invalid code:
                  value:
                    message: invalid code
                  summary: Code is invalid
                invalid password:
                  value:
                    message: invalid password
                  summary: The password does not match requirements (An uppercase and lowecase character, a number, a special character and more than 6 character length)
        '500':
          description: Save error
          content:
            application/json:
              example: {"message": "password not saved"}

  /api/person/update:
    post:
      tags:
        - person
      summary: Updates logged person account
      parameters:
        - in: query
          name: person_email
          schema:
            type: string
            example: emailOfPerson@email.com
        - name: person_username
          in: query
          description: Person user name
          example: john
          schema:
            type: string
        - name: person_ddi
          in: query
          description: Person DDI code
          example: +55
          schema:
            type: string
        - name: person_phone
          in: query
          description: Person Phone
          example: 41981716151
          schema:
            type: string
        - name: person_langue
          in: query
          description: Language from ListLanguages
          example: 1
          schema:
            type: integer

      # requestBody:
      #   description: Change password
      #   content:
      #     application/json:
      #       schema:
      #         $ref: '#/components/schemas/ChangePassword'
      #   required: true
      responses:
        '200':
          description: Person data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonObject'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid parameters:
                  value:
                    message: invalid email
                  summary: The person email field must be a valid email address. (dynamic response)
                invalid email:
                  value:
                    message: invalid email
                  summary: Email in use
        '500':
          description: Save error
          content:
            application/json:
              example: {"message": "person not updated"}

  /api/professional/find/{professional_slug}:
    get:
      tags:
        - professional
      summary: Get a professional information by its slug
      description: Returns information of professional
      parameters:
        - name: professional_slug
          in: path
          schema:
            type: string
          description: Professional id
          example: professional-571591591
          required: true
      responses:
        '200':
          description: A list of professionals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfessionalPaginated'
  /api/professional/index:
    get:
      tags:
        - professional
      summary: List all professionals
      description: retrieves a list of professionals with optional filters.
      parameters:
        - name: professional_id
          in: query
          schema:
            type: integer
          description: Professional id
          example: 1
        - name: skill_name
          in: query
          description: Array of tags (skills) id
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                skill_name:
                  type: integer
                  example: 1
        - name: skproficiency_level
          in: query
          description: Array of profeciencies ids of category = 'level' | The position on array matches the skill_name attribute
          example: 3
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                skproficiency_level:
                  type: integer
                  example: 1
        - name: area_of_study
          in: query
          description: Array area of study id from professional experiences
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                area_of_study:
                  type: integer
                  example: 1
        - name: dpgender
          in: query
          description: Array of gender id
          example: 3
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                dpgender:
                  type: integer
                  example: 1
        - name: dpcity_id
          in: query
          description: Array of professional city id from ListCity
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                dpcity_id:
                  type: integer
                  example: 1
        - name: dpstate_id
          in: query
          description: Array of professional state id from ListState
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                dpstate_id:
                  type: integer
                  example: 1
        - name: dpcountry_id
          in: query
          description: Array of professional country id from ListCountry
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                dpcountry_id:
                  type: integer
                  example: 1
        - name: lalangue_id
          in: query
          description: Array of professional language id from ListLanguage
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                lalangue_id:
                  type: integer
                  example: 1
        - name: laspeaking_level
          in: query
          description: Array of proficiency id of category = 'language' id from ListLanguage | The position on array matches the lalangue_id attribute to set the speaking profeciency at the language
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                laspeaking_level:
                  type: integer
                  example: 1
        - name: lalistening_level
          in: query
          description: Array of proficiency id of category = 'language' id from ListLanguage | The position on array matches the lalangue_id attribute to set the listening profeciency at the language
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                lalistening_level:
                  type: integer
                  example: 1
        - name: lawriting_level
          in: query
          description: Array of proficiency id of category = 'language' id from ListLanguage | The position on array matches the lalangue_id attribute to set the writing profeciency at the language
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                lawriting_level:
                  type: integer
                  example: 1
        - name: lareading_level
          in: query
          description: Array of proficiency id of category = 'language' id from ListLanguage | The position on array matches the lalangue_id attribute to set the reading profeciency at the language
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                lareading_level:
                  type: integer
                  example: 1
        - name: visa_type
          in: query
          description: Array of TypeVisa id
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                visa_type:
                  type: integer
                  example: 1
        - name: vicountry_id
          in: query
          description: Array of ListCountry id | The position on array matches the visa_type attribute to set the country of it
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                vicountry_id:
                  type: integer
                  example: 1
        - name: certification_name
          in: query
          description: The certifcation name from the professional Certifications 
          example: php 9
          schema:
            type: string
        - name: exjob_title
          in: query
          description: The experience from the professional Experiences
          example: backend developer
          schema:
            type: string
        - name: page
          in: query
          description: The page for list (max 100 record per page)
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: A list of professionals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfessionalPaginated'
  /api/professional/update:
    post:
      tags:
        - professional
      summary: Updates logged person Professional account
      parameters:
        - in: query
          name: professional_email
          schema:
            type: string
            example: emailOfPerson@email.com
        - name: professional_firstname
          in: query
          description: Professional first name
          example: john
          schema:
            type: string
        - name: professional_lastname
          in: query
          description: Professional last name
          example: john
          schema:
            type: string
        - name: professional_title
          in: query
          description: Professional title
          example: +55
          schema:
            type: string
        - name: professional_phone
          in: query
          description: Person Phone
          example: 41981716151
          schema:
            type: string
        - name: professional_photo
          in: query
          description: Professional profile photo - 2MB size allowed!
          example: base64image
          schema:
            type: string
        - name: professional_cover
          in: query
          description: Professional cover photo - 2MB size allowed!
          example: base64image
          schema:
            type: string
      responses:
        '200':
          description: Person data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonObject'
        '400':
          description: Invalid parameters
          content:
            application/json:
              example: {"message": "The professional email field must be a valid email address. (dynamic response)"}

        '500':
          description: Save error
          content:
            application/json:
              examples:
                professional not found:
                  value:
                    message: No professional was found
                  summary: The professional was not created
                professional not updated:
                  value:
                    message: Professional was not updated
                  summary: Professional not updated
  /api/professional/updateprofessionalperson:
    post:
      tags:
        - professional
      summary: Updates logged person DataPerson account
      parameters:
        - in: query
          name: dpdate_of_birth
          schema:
            type: string
            example: 2024-01-01
            description: Professional date of birth
        - name: dpgender
          in: query
          description: Gender id
          example: 1
          schema:
            type: string
        - name: dpcity_id
          in: query
          description: City id  - must belong to sent state id
          example: 1
          schema:
            type: string
        - name: dpstate_id
          in: query
          description: State id - must belong to sent country id
          example: 1
          schema:
            type: string
        - name: dppostal_code
          in: query
          description: Post code
          example: 70213241
          schema:
            type: string
        - name: dpcountry_id
          in: query
          description: Country id
          example: 1
          schema:
            type: string
      responses:
        '200':
          description: Person data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataPersonObject'
        '400':
          description: Save error or professional not found
          content:
            application/json:
              examples:
                professional not found:
                  value:
                    message: No professional was found
                  summary: The professional was not created
                data person not updated:
                  value:
                    message: Professional was not updated
                  summary: Professional not updated
        '500':
          description: Invalid parameters
          content:
            application/json:
              example: {"message": "The professional email field must be a valid email address. (dynamic response)"}
  /api/professional/updateprofessionaljobmodality:
    post:
      tags:
        - professional
      summary: Manages job modalities of professional, this method can ADD a new jobModality, REMOVE a current jobModality or LIST all jobModalities of professional
      parameters:
        - in: query
          name: action
          schema:
            type: string
            example: add (ADD or REMOVE or LIST)
            description: Either ADD, REMOVE or LIST
        - name: job_modality_id
          in: query
          description: The job modality id
          example: 1
          schema:
            type: string
            description: only required when 'action' = 'add'
      responses:
        '200':
          description: Person data updated
          content:
            application/json:
              example: {"message":"action performed", "data": "Array|Null"}
        '400':
          description: Save error or professional not found
          content:
            application/json:
              examples:
                invalid action:
                  value:
                    message: invalid action
                  summary: The action is invalid
                professional not found:
                  value:
                    message: No professional was found
                  summary: The professional was not created
        '500':
          description: The action was not completed
          content:
            application/json:
              example: {"message": "action not completed with success"}
  /api/professional/updateprofessionalprofession:
    post:
      tags:
        - professional
      summary: Manages porfessions of professional, this method can ADD a new profession, REMOVE a current profession or LIST all profession of professional
      parameters:
        - in: query
          name: action
          schema:
            type: string
            example: add (ADD or REMOVE or LIST)
            description: Either ADD, REMOVE or LIST
        - name: lprofession_id
          in: query
          description: The listprofessions
          example: 1
          schema:
            type: string
            description: only required when 'action' = 'add' AND 'revove'
      responses:
        '200':
          description: Professional data updated
          content:
            application/json:
              example: {"message":"action performed", "data": "Array|Null"}
        '400':
          description: required parameters missing or professional not found
          content:
            application/json:
              examples:
                invalid action:
                  value:
                    message: invalid action
                  summary: The action is invalid
                professional not found:
                  value:
                    message: No professional was found
                  summary: The professional was not created
        '500':
          description: The action was not completed
          content:
            application/json:
              example: {"message": "action not completed with success"}


  /api/company/update:
    post:
      tags:
        - company
      summary: Updates logged person Company account
      parameters:
        - in: query
          name: company_register_number
          schema:
            type: string
            example: 42.827.028/0001-47
            description: Company's licence number
        - name: company_name
          in: query
          description: Name of the company
          example: TimbersWood Unlimited
          schema:
            type: string
        - name: company_logo
          in: query
          description: Logo photo of company
          example: base64Image-51515
          schema:
            type: string
        - name: company_cover_photo
          in: query
          description: Cover photo of company
          example: base64Image-51515
          schema:
            type: string
        - name: company_type
          in: query
          description: Company type
          example: 1
          schema:
            type: string
        - name: company_video
          in: query
          description: The company video
          example: https://timbercompany.com/presentationvideo
          schema:
            type: string
        - name: company_email
          in: query
          description: The company's email
          example: company@company.com
          schema:
            type: string
        - name: company_phone
          in: query
          description: The company's phone
          example: +554198765432
          schema:
            type: string
        - name: company_website
          in: query
          description: Website of company
          example: https://timbercompany.com
          schema:
            type: string
        - name: company_description
          in: query
          description: Description of the company
          example: A timber type company
          schema:
            type: string
        - name: company_number_employees
          in: query
          description: The number of workers
          example: 11
          schema:
            type: integer
        - name: company_benefits
          in: query
          description: Text field for company benefits
          example: Many advantages such as...
          schema:
            type: string
      responses:
        '200':
          description: Person data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataPersonObject'
        '400':
          description: Save error or professional not found
          content:
            application/json:
              examples:
                professional not found:
                  value:
                    message: No professional was found
                  summary: The professional was not created
                data person not updated:
                  value:
                    message: Professional was not updated
                  summary: Professional not updated
        '500':
          description: Invalid parameters
          content:
            application/json:
              example: {"message": "The professional email field must be a valid email address. (dynamic response)"}
  /api/company/manageadmin:
    post:
      tags:
        - company
      summary: Manages company admins, this method can ADD a new admin, REMOVE a current admin, GRANT privilegies and REVOKE privilegies of an admin. Only admins with privilegies can access!
      parameters:
        - in: query
          name: action
          description: Either "add", "remove", "grant" or "revoke"
          schema:
            type: string
            example: add
        - name: person_id
          in: query
          description: Person id to receive the action
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Action performed
          content:
            application/json:
              example: {"message": "action performed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid action:
                  value:
                    message: invalid action
                  summary: The action sent is not valid
                person is invalid:
                  value:
                    message: person is invalid
                  summary: The perfon id is invalid
        '500':
          description: Save error or professional not found
          content:
            application/json:
              examples:
                company not found:
                  value:
                    message: company not found
                  summary: The company of logged person was not found
                action not performed:
                  value:
                    message: action not completed with success
                  summary: A problem occurred while performing the action
                no privilegies:
                  value:
                    message: you have no privilegies
                  summary: Logged person is not an admin or not an admin with privilegies
  /api/company/managerecruiter:
    post:
      tags:
        - company
      summary: Manages company recruiters, this method can ADD a new recruiter or REMOVE a current recruit. Only admins with privilegies can access!
      parameters:
        - in: query
          name: action
          description: Either "add", "remove"
          schema:
            type: string
            example: add
        - name: person_id
          in: query
          description: Person id to receive the action
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Action performed
          content:
            application/json:
              example: {"message": "action performed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid action:
                  value:
                    message: invalid action
                  summary: The action sent is not valid
                person is invalid:
                  value:
                    message: person is invalid
                  summary: The perfon id is invalid
        '500':
          description: Save error or professional not found
          content:
            application/json:
              examples:
                company not found:
                  value:
                    message: company not found
                  summary: The company of logged person was not found
                action not performed:
                  value:
                    message: action not completed with success
                  summary: A problem occurred while performing the action
                no privilegies:
                  value:
                    message: you have no privilegies
                  summary: Logged person is not an admin or not an admin with privilegies

  /api/recruiter/update:
    post:
      tags:
        - recruiter
      summary: Updates logged person Recruiter account
      parameters:
        - in: query
          name: recruiter_photo
          schema:
            type: string
            example: base64Image-41415151
            description: Recruiter photo
      responses:
        '200':
          description: Recruiter data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecruiterObject'
        '400':
          description: Save error or recruiter not found
          content:
            application/json:
              examples:
                no recruiter found:
                  value:
                    message: No recruiter was found
                  summary: The recruiter was not created
                invalid parameters:
                  value:
                    message: invalid image
                  summary: Invalid image
        '500':
          description: recruiter not updated
          content:
            application/json:
              example: {"message": "recruiter not updated"}


  /api/joblist/index:
    get:
      tags:
        - joblist
      summary: List all jobs
      description: retrieves a list of job with optional filters.
      parameters:
        - name: job_modality_id
          in: query
          description: Array of job modalities id
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                job_modality_id:
                  type: integer
                  example: 1
        - name: company_id
          in: query
          description: Array of companies id
          example: 3
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                company_id:
                  type: integer
                  example: 1
        - name: job_city
          in: query
          description: Array of job city id
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                job_city:
                  type: integer
                  example: 1
        - name: job_country
          in: query
          description: Array of job country id
          example: 3
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                job_country:
                  type: integer
                  example: 1
        - name: job_seniority
          in: query
          description: Array of proficiencies ids of category 'seniority'
          example: 1
          schema:
            type: array
            items:
              required:
                - test
              type: object
              properties:
                job_seniority:
                  type: integer
                  example: 1
        - name: job_salary_start
          in: query
          description: search for jobs with given starting salary
          example: 1527.20
          schema:
            type: number
        - name: job_salary_end
          in: query
          description: search for jobs with given ending salary
          example: 2700.20
          schema:
            type: number
        - name: job_description
          in: query
          description: search fro jobs with (like) this description
          example: php devoper
          schema:
            type: string
        - name: job_experience_description
          in: query
          description: search for the given experience
          example: +2 years how backend developer
          schema:
            type: string
        - name: experience_in_months_start
          in: query
          description: search for jobs with experience above sent experience_in_months_start
          example: 5
          schema:
            type: integer
        - name: experience_in_months_end
          in: query
          description: search for jobs with experience bellow sent experience_in_months_end
          example: 10
          schema:
            type: integer
        - name: page
          in: query
          description: The page for list (max 100 record per page)
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: A list of job
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobListPaginated'
  /api/joblist/{joblistId}:
    get:
      tags:
        - joblist
      summary: Search for job
      description: Search for a specific job by id
      parameters:
        - name: joblistId
          in: path
          description: Job id
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: job found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListShow'
        '404':
          description: job not found.
  /api/joblist/store:
    post:
      tags:
        - joblist
      summary: Create a new job
      parameters:
        - name: job_modality_id
          in: query
          description: Job modality id
          example: 8
          required: true
          schema:
            type: integer
        - name: job_country
          in: query
          description: List country id
          example: 10
          schema:
            type: integer
        - name: job_city
          in: query
          description: List city id | City must be located in the sent Country id
          example: 15
          schema:
            type: integer
        - name: job_seniority
          in: query
          description: Proficiency id of category = 'seniority'
          example: 1
          schema:
            type: string
        - name: job_salary
          in: query
          description: Work Payment
          example: 7200.52
          schema:
            type: number
        - name: job_description
          in: query
          description: Work desctiption
          example: We need a person who knows advanced flutter
          schema:
            type: string
        - name: experience_in_months
          in: query
          description: experience in months
          example: 2
          schema:
            type: integer
        - name: job_experience_description
          in: query
          description: free text field for job experience description
          example: 2+ As backend developer
          schema:
            type: string
        - name: job_benefits
          in: query
          description: free text field for job benefits
          example: food voucher and home office
          schema:
            type: string
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListShow'
      responses:
        '201':
          description: job created successfully.
        '400':
          description: Field entered incorrectly.
          content:
            application/json:
              example: {"message": "invalid parameters"}
        '500':
          description: Create error.
          content:
            application/json:
              example: {"message": "an error occurred while creating the job, please try again later"}
  /api/joblist/{jobListId}:
    put:
      tags:
        - joblist
      summary: Update a job by ID
      parameters:
        - name: jobListId
          in: path
          description: Job list id
          example: 1
          required: true
          schema:
            type: integer
        - name: job_modality_id
          in: query
          description: Job modality id
          example: 8
          required: true
          schema:
            type: integer
        - name: job_country
          in: query
          description: List country id
          example: 10
          schema:
            type: integer
        - name: job_city
          in: query
          description: List city id | City must be located in the sent Country id
          example: 15
          schema:
            type: integer
        - name: job_seniority
          in: query
          description: Proficiency id of category = 'seniority'
          example: 1
          schema:
            type: string
        - name: job_salary
          in: query
          description: Work Payment
          example: 7200.52
          schema:
            type: number
        - name: job_description
          in: query
          description: Work desctiption
          example: We need a person who knows advanced flutter
          schema:
            type: string
        - name: experience_in_months
          in: query
          description: experience in months
          example: 2
          schema:
            type: integer
        - name: job_experience_description
          in: query
          description: free text field for job experience description
          example: 2+ As backend developer
          schema:
            type: string
        - name: job_benefits
          in: query
          description: free text field for job benefits
          example: food voucher and home office
          schema:
            type: string
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListShow'
      responses:
        '201':
          description: job updated successfully.
        '400':
          description: Field entered incorrectly.
          content:
            application/json:
              example: {"message": "invalid parameters"}
        '500':
          description: Update error.
          content:
            application/json:
              example: {"message": "an error occurred while updating the job, please try again later"}
  /api/joblist/{jobList_Id}:
    delete:
      tags:
        - joblist
      summary: Delete a job
      description: Delete a specific job by id
      parameters:
        - name: jobList_Id
          in: path
          description: job list id
          required: true
          example: 8
          schema:
            type: integer
      responses:
        '200':
          description: Job removed
          content:
            application/json:
              example: {"message": "job deleted sucessfully"}
        '404':
          description: Job not found
          content:
            application/json:
              example: {"message": "job not found"}
  /api/joblist/managelanguage/{jobList_Id}:
    post:
      tags:
        - joblist
      summary: Manage job visas
      description: Manages job visas, this method can ADD, REMOVE or LIST the job language(s). Only job owner company can use this method!
      parameters:
        - name: jobList_Id
          in: path
          description: job list id
          required: true
          example: 8
          schema:
            type: integer
        - name: action
          in: query
          description: Either 'add', 'remove' or 'list'
          required: true
          example: add
          schema:
            type: string
        - name: job_language_id
          in: query
          description: Jog language id
          required: false
          example: 8
          schema:
            type: integer
        - name: language_id
          in: query
          description: job list id
          required: false
          example: 8
          schema:
            type: integer
        - name: proficiency_id
          in: query
          description: Proficiency id of category = language
          required: false
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Action performed
          content:
            application/json:
              example: {"message": "action performed", "data": "Array of JobVisas objects | null"}
        '404':
          description: Invalid parameters
          content:
            application/json:
              example: {"message": "invalid parameters dynamic message"}
        '500':
          description: Action error
          content:
            application/json:
              example: {"message":"action not performed"}
  /api/joblist/manageskills/{jobList_Id}:
    post:
      tags:
        - joblist
      summary: Manage job skills
      description: Manages job skills, this method can ADD, REMOVE or LIST the job skill(s). Only job owner company can use this method!
      parameters:
        - name: jobList_Id
          in: path
          description: job list id
          required: true
          example: 8
          schema:
            type: integer
        - name: action
          in: query
          description: Either 'add', 'remove' or 'list'
          required: true
          example: add
          schema:
            type: string
        - name: tag_id
          in: query
          description: Tag id
          required: false
          example: 8
          schema:
            type: integer
        - name: job_skill_id
          in: query
          description: Job skill id
          required: false
          example: 8
          schema:
            type: integer
      responses:
        '200':
          description: Action performed
          content:
            application/json:
              example: {"message": "action performed", "data": "Array of JobSkills objects | null"}
        '404':
          description: Invalid parameters
          content:
            application/json:
              example: {"message": "invalid parameters dynamic message"}
        '500':
          description: Action error
          content:
            application/json:
              example: {"message":"action not performed"}
  /api/joblist/managevisas/{jobList_Id}:
    post:
      tags:
        - joblist
      summary: Manage job visa
      description: Manages job visas, this method can ADD, REMOVE or LIST the job visa(s). Only job owner company can use this method!
      parameters:
        - name: jobList_Id
          in: path
          description: job list id
          required: true
          example: 8
          schema:
            type: integer
        - name: action
          in: query
          description: Either 'add', 'remove' or 'list'
          required: true
          example: add
          schema:
            type: string
        - name: visas_type_id
          in: query
          description: Tag id
          required: false
          example: 8
          schema:
            type: integer
        - name: country_id
          in: query
          description: Job skill id
          required: false
          example: 8
          schema:
            type: integer
        - name: job_visa_id
          in: query
          description: Job visa id
          required: false
          example: 8
          schema:
            type: integer
      responses:
        '200':
          description: Action performed
          content:
            application/json:
              example: {"message": "action performed", "data": "Array of JobVisas objects | null"}
        '404':
          description: Invalid parameters
          content:
            application/json:
              example: {"message": "invalid parameters dynamic message"}
        '500':
          description: Action error
          content:
            application/json:
              example: {"message":"action not performed"}


  /api/curriculum/curriculum:
    post:
      tags:
        - curriculum
      summary: Creates or Updates a curriculum
      parameters:
        - in: query
          name: curriculum_id
          schema:
            type: integer
            example: 1
            description: Only in case of an update
          required: false
        - in: query
          name: curriculum_file
          schema:
            type: string
            example: imageBase64|fileBase64
            description: File as base64 until 2MB
          required: true
        - in: query
          name: clengua_id
          schema:
            type: integer
            example: 1
            description: Language id
          required: true
      responses:
        '200':
          description: Email containing password change code sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Curriculum'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
        '500':
          description: Authentication error
          content:
            application/json:
              example: {"message": "curriculum not created/updated"}
  /api/curriculum/curriculum/{curriculum_id}:
    get:
      tags:
        - curriculum
      summary: Display the specified Curriculum.
      parameters:
        - in: path
          name: curriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: Curriculum object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Curriculum'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/curriculum/{curriculumid}:
    delete:
      tags:
        - curriculum
      summary: Remove the specified curriculum and all related things.
      parameters:
        - in: path
          name: curriculumid
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "curriculum removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "curriculum not removed"}
  /api/curriculum/curriculum/:
    get:
      tags:
        - curriculum
      summary: Get all curriculumns of logged professional.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: curriculum_type
          schema:
            type: string
            example: info
            description: Curriculum type ('file' or 'info')
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Curriculum Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found


  /api/curriculum/skill:
    post:
      tags:
        - skill - curriculum
      summary: Create a skill
      parameters:
        - in: query
          name: skill_name
          schema:
            type: string
            example: 1
            description: Tag id
          required: true
        - in: query
          name: skproficiency_level
          schema:
            type: integer
            example: 1
            description: Proficiency id
          required: true
        - in: query
          name: experience_level
          schema:
            type: number
            example: 50.50
            description: Experience level from 0 until 100
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                skill not found:
                  value:
                    message: skill not found
                  summary: Skill was not found
                invalid object id:
                  value:
                    message: $objectName is not valid
                  summary: Either skill_name or skproficiency_level was/were not found
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "skill not created"}
  /api/curriculum/skill/{skill__id}:
    put:
      tags:
        - skill - curriculum
      summary: Updates a skill
      parameters:
        - in: path
          name: skill__id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: skill_name
          schema:
            type: string
            example: 1
            description: Tag id
          required: true
        - in: query
          name: skproficiency_level
          schema:
            type: integer
            example: 1
            description: Proficiency id
          required: true
        - in: query
          name: experience_level
          schema:
            type: number
            example: 50.50
            description: Experience level from 0 until 100
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                skill not found:
                  value:
                    message: skill not found
                  summary: Skill was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
                  summary: Either skill_name or skproficiency_level was/were not found
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "skill not updated"}
  /api/curriculum/skill/{skill_id}:
    get:
      tags:
        - skill - curriculum
      summary: Display the specified Skill.
      parameters:
        - in: path
          name: skill_id
          schema:
            type: integer
            example: 1
            description: skill id
          required: true
      responses:
        '200':
          description: Skill object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: link not found
                  summary: Curriculum not found
  /api/curriculum/skill/{skillId}:
    delete:
      tags:
        - skill - curriculum
      summary: Remove the specified skill.
      parameters:
        - in: path
          name: skillId
          schema:
            type: integer
            example: 1
            description: skill id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "skill removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                skill not found:
                  value:
                    message: skill not found
                  summary: Skill not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "skill not removed"}
  /api/curriculum/skill/:
    get:
      tags:
        - skill - curriculum
      summary: Get all skills of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
      responses:
        '200':
          description: In this case "data" property contains an array of Skill Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found


  /api/curriculum/visa:
    post:
      tags:
        - visa - curriculum
      summary: Creates a visa
      parameters:
        - in: query
          name: vicountry_id
          schema:
            type: integer
            example: 1
            description: Country of  this visa
          required: true
        - in: query
          name: visa_type
          schema:
            type: integer
            example: 1
            description: Type of the visa id
          required: true
        - in: query
          name: vicurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visa'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid object id:
                  value:
                    message: $objectName is not valid
                  summary: Either vicountry_id or visa_type was/were not found
        '500':
          description: Create error
          content:
            application/json:
              example: {"message": "visa not created"}
  /api/curriculum/visa/{visa__id}:
    put:
      tags:
        - visa - curriculum
      summary: Updates a visa
      parameters:
        - in: path
          name: visa__id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: vicountry_id
          schema:
            type: integer
            example: 1
            description: Country of  this visa
          required: true
        - in: query
          name: visa_type
          schema:
            type: integer
            example: 1
            description: Type of the visa id
          required: true
        - in: query
          name: vicurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visa'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                visa not found:
                  value:
                    message: visa not found
                  summary: Visa was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
                  summary: Either skill_name or skproficiency_level was/were not found
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "visa not updated"}
  /api/curriculum/visa/{visa_id}:
    get:
      tags:
        - visa - curriculum
      summary: Display the specified Visa.
      parameters:
        - in: path
          name: visa_id
          schema:
            type: integer
            example: 1
            description: visa id
          required: true
      responses:
        '200':
          description: Visa object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visa'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/visa/{visaId}:
    delete:
      tags:
        - visa - curriculum
      summary: Remove the specified visa.
      parameters:
        - in: path
          name: visaId
          schema:
            type: integer
            example: 1
            description: visa id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "visa removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                visa not found:
                  value:
                    message: visa not found
                  summary: visa not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "visa not removed"}
  /api/curriculum/visa/:
    get:
      tags:
        - visa - curriculum
      summary: Get all visas of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: vicurriculum_id
          schema:
            type: integer
            example: 1
            description: The professional curriculum id
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Visa Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
  /api/curriculum/link:
    post:
      tags:
        - link - curriculum
      summary: Create a link
      parameters:
        - in: query
          name: link_type
          schema:
            type: string
            example: youtube | linkedin | facebook | external | instagram
            description: Acceptable types -> 'youtube', 'linkedin', 'facebook', 'external', 'instagram'
          required: true
        - in: query
          name: url
          schema:
            type: integer
            example: 1
            description: Language id
          required: true
        - in: query
          name: curriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                link type not valid:
                  value:
                    message: link type not valid
                  summary: Link type is not valid
        '500':
          description: Authentication error
          content:
            application/json:
              example: {"message": "link not created"}
  /api/curriculum/link/{link__id}:
    put:
      tags:
        - link - curriculum
      summary: Update a link
      parameters:
        - in: path
          name: link__id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: link_type
          schema:
            type: string
            example: youtube | linkedin | facebook | external | instagram
            description: Acceptable types -> 'youtube', 'linkedin', 'facebook', 'external', 'instagram'
          required: true
        - in: query
          name: url
          schema:
            type: integer
            example: 1
            description: Language id
          required: true
        - in: query
          name: curriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                link type not valid:
                  value:
                    message: link type not valid
                  summary: Link type is not valid
        '500':
          description: Authentication error
          content:
            application/json:
              example: {"message": "link not created"}
  /api/curriculum/link/{link_id}:
    get:
      tags:
        - link - curriculum
      summary: Display the specified Link.
      parameters:
        - in: path
          name: link_id
          schema:
            type: integer
            example: 1
            description: link id
          required: true
      responses:
        '200':
          description: Link object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: link not found
                  summary: Curriculum not found
  /api/curriculum/link/{linkId}:
    delete:
      tags:
        - link - curriculum
      summary: Remove the specified link.
      parameters:
        - in: path
          name: linkId
          schema:
            type: integer
            example: 1
            description: link id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "link removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "link not removed"}
  /api/curriculum/link/:
    get:
      tags:
        - link - curriculum
      summary: Get all links of logged professional.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
      responses:
        '200':
          description: In this case "data" property contains an array of Link Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found


  /api/curriculum/experience:
    post:
      tags:
        - experience - curriculum
      summary: Creates a experience
      parameters:
        - in: query
          name: exjob_title
          schema:
            type: string
            example: FullStack Developer
            description: Job title of experience
          required: true
        - in: query
          name: excompany_name
          schema:
            type: string
            example: Enterprise Example
            description: Coompany name of experience
          required: true

        - in: query
          name: exstart_date
          schema:
            type: string
            example: 2024-01-01
            description: Start date of the experience
          required: true

        - in: query
          name: exend_date
          schema:
            type: string
            example: 2024-01-01
            description: End date of the experience
          required: false

        - in: query
          name: exdescription
          schema:
            type: string
            example: Enterprise Example
            description: description of the experience
          required: true

        - in: query
          name: excurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid object id:
                  value:
                    message: $objectName is not valid
        '500':
          description: Create error
          content:
            application/json:
              example: {"message": "experience not created"}
  /api/curriculum/experience/{experience__id}:
    put:
      tags:
        - experience - curriculum
      summary: Updates a experience
      parameters:
        - in: path
          name: experience__id
          schema:
            type: integer
            example: 1
            description: Experience id
          required: true
        - in: query
          name: exjob_title
          schema:
            type: string
            example: FullStack Developer
            description: Job title of experience
          required: true
        - in: query
          name: excompany_name
          schema:
            type: string
            example: Enterprise Example
            description: Coompany name of experience
          required: true
        - in: query
          name: exstart_date
          schema:
            type: string
            example: 2024-01-01
            description: Start date of the experience
          required: true
        - in: query
          name: edend_date
          schema:
            type: string
            example: 2024-01-01
            description: End date of the experience
          required: false

        - in: query
          name: exdescription
          schema:
            type: string
            example: Enterprise Example
            description: description of the experience
          required: true

        - in: query
          name: excurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                experience not found:
                  value:
                    message: experience not found
                  summary: Experience was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "experience not updated"}
  /api/curriculum/experience/{experience_id}:
    get:
      tags:
        - experience - curriculum
      summary: Display the specified Experience.
      parameters:
        - in: path
          name: experience_id
          schema:
            type: integer
            example: 1
            description: experience id
          required: true
      responses:
        '200':
          description: Experience object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experience'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/experience/{experienceId}:
    delete:
      tags:
        - experience - curriculum
      summary: Remove the specified experience.
      parameters:
        - in: path
          name: experienceId
          schema:
            type: integer
            example: 1
            description: experience id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "experience removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                experience not found:
                  value:
                    message: experience not found
                  summary: experience not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "experience not removed"}
  /api/curriculum/experience/:
    get:
      tags:
        - experience - curriculum
      summary: Get all experiences of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: excurriculum_id
          schema:
            type: integer
            example: 1
            description: The professional curriculum id
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Experience Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found

  /api/curriculum/education:
    post:
      tags:
        - education - curriculum
      summary: Creates a education
      parameters:
        - in: query
          name: eddegree
          schema:
            type: string
            example: Bacheelor
            description: Degree of education
          required: true
        - in: query
          name: edfield_of_study
          schema:
            type: integer
            example: 1
            description: Field of Study
          required: true
        - in: query
          name: edinstitution
          schema:
            type: integer
            example: Stanford
            description: Field of Study
          required: true
        - in: query
          name: edstart_date
          schema:
            type: string
            example: 2024-01-01
            description: Start date of the education
          required: true
        - in: query
          name: edend_date
          schema:
            type: string
            example: 2024-01-01
            description: End date of the education
          required: false
        - in: query
          name: eddescription
          schema:
            type: string
            example: Education Description Example
            description: description of the education
          required: true
        - in: query
          name: edcurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid object id:
                  value:
                    message: $objectName is not valid
        '500':
          description: Create error
          content:
            application/json:
              example: {"message": "education not created"}
  /api/curriculum/education/{education__id}:
    put:
      tags:
        - education - curriculum
      summary: Updates a education
      parameters:
        - in: path
          name: education__id
          schema:
            type: integer
            example: 1
            description: Education id
          required: true
        - in: query
          name: eddegree
          schema:
            type: string
            example: Bacheelor
            description: Degree of education
          required: true
        - in: query
          name: edfield_of_study
          schema:
            type: integer
            example: Filed Example
            description: Field of Study
          required: true
        - in: query
          name: edinstitution
          schema:
            type: integer
            example: Stanford
            description: Field of Study
          required: true
        - in: query
          name: edstart_date
          schema:
            type: string
            example: 2024-01-01
            description: Start date of the education
          required: true
        - in: query
          name: edend_date
          schema:
            type: string
            example: 2024-01-01
            description: End date of the education
          required: false
        - in: query
          name: eddescription
          schema:
            type: string
            example: Education Description Example
            description: description of the education
          required: true
        - in: query
          name: edcurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                education not found:
                  value:
                    message: education not found
                  summary: Education was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "education not updated"}
  /api/curriculum/education/{education_id}:
    get:
      tags:
        - education - curriculum
      summary: Display the specified Education.
      parameters:
        - in: path
          name: education_id
          schema:
            type: integer
            example: 1
            description: education id
          required: true
      responses:
        '200':
          description: Education object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Education'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/education/{educationId}:
    delete:
      tags:
        - education - curriculum
      summary: Remove the specified education.
      parameters:
        - in: path
          name: educationId
          schema:
            type: integer
            example: 1
            description: education id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "education removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                education not found:
                  value:
                    message: education not found
                  summary: education not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "education not removed"}
  /api/curriculum/education/:
    get:
      tags:
        - education - curriculum
      summary: Get all educations of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: edcurriculum_id
          schema:
            type: integer
            example: 1
            description: The professional curriculum id
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Education Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found

  /api/curriculum/certification:
    post:
      tags:
        - certification - curriculum
      summary: Creates a certification
      parameters:
        - in: query
          name: certification_name
          schema:
            type: string
            example: ZCPE
            description: Certification Name
          required: true
        - in: query
          name: cerissuing_organization
          schema:
            type: string
            example: Zend
            description: Certification issuing organization
          required: true
        - in: query
          name: cerissue_date
          schema:
            type: string
            example: 2024-01-01
            description: Issue certification date
          required: true
        - in: query
          name: cert_hours
          schema:
            type: integer
            example: 86
            description: Hours of the certification
          required: true
        - in: query
          name: cerdescription
          schema:
            type: string
            example: Ceeretification Zend for PHP development.
            description: Certification description
          required: true
        - in: query
          name: cerlink
          schema:
            type: string
            example: http://framework.zend.com
            description: Certificatin Link.
          required: true

        - in: query
          name: cercurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid object id:
                  value:
                    message: $objectName is not valid
        '500':
          description: Create error
          content:
            application/json:
              example: {"message": "certification not created"}
  /api/curriculum/certification/{certification__id}:
    put:
      tags:
        - certification - curriculum
      summary: Updates a certification
      parameters:
        - in: path
          name: certification__id
          schema:
            type: integer
            example: 1
            description: Certification id
          required: true
        - in: query
          name: certification_name
          schema:
            type: string
            example: ZCPE
            description: Certification Name
          required: true
        - in: query
          name: cerissuing_organization
          schema:
            type: string
            example: Zend
            description: Certification issuing organization
          required: true
        - in: query
          name: cerissue_date
          schema:
            type: string
            example: 2024-01-01
            description: Issue certification date
          required: true
        - in: query
          name: cert_hours
          schema:
            type: integer
            example: 86
            description: Hours of the certification
          required: true
        - in: query
          name: cerdescription
          schema:
            type: string
            example: Ceeretification Zend for PHP development.
            description: Certification description
          required: true
        - in: query
          name: cerlink
          schema:
            type: string
            example: http://framework.zend.com
            description: Certificatin Link.
          required: true

        - in: query
          name: cercurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                certification not found:
                  value:
                    message: certification not found
                  summary: Certification was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "certification not updated"}
  /api/curriculum/certification/{certification_id}:
    get:
      tags:
        - certification - curriculum
      summary: Display the specified Certification.
      parameters:
        - in: path
          name: certification_id
          schema:
            type: integer
            example: 1
            description: certification id
          required: true
      responses:
        '200':
          description: Certification object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/certification/{certificationId}:
    delete:
      tags:
        - certification - curriculum
      summary: Remove the specified certification.
      parameters:
        - in: path
          name: certificationId
          schema:
            type: integer
            example: 1
            description: certification id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "certification removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                certification not found:
                  value:
                    message: certification not found
                  summary: certification not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "certification not removed"}
  /api/curriculum/certification/:
    get:
      tags:
        - certification - curriculum
      summary: Get all certifications of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: cercurriculum_id
          schema:
            type: integer
            example: 1
            description: The professional curriculum id
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Certification Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found

  /api/curriculum/presentation:
    post:
      tags:
        - presentation - curriculum
      summary: Creates a presentation
      parameters:
        - in: query
          name: presentation_text
          schema:
            type: string
            example: Presentation example text.
            description: Presentation Text.
          required: true

        - in: query
          name: precurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentation'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid object id:
                  value:
                    message: $objectName is not valid
        '500':
          description: Create error
          content:
            application/json:
              example: {"message": "presentation not created"}
  /api/curriculum/presentation/{presentation__id}:
    put:
      tags:
        - presentation - curriculum
      summary: Updates a presentation
      parameters:
        - in: path
          name: presentation__id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: presentation_text
          schema:
            type: string
            example: Presentation example text.
            description: Presentation Text.
          required: true

        - in: query
          name: precurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentation'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                presentation not found:
                  value:
                    message: presentation not found
                  summary: Presentation was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "presentation not updated"}
  /api/curriculum/presentation/{presentation_id}:
    get:
      tags:
        - presentation - curriculum
      summary: Display the specified Presentation.
      parameters:
        - in: path
          name: presentation_id
          schema:
            type: integer
            example: 1
            description: presentation id
          required: true
      responses:
        '200':
          description: Presentation object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Presentation'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/presentation/{presentationId}:
    delete:
      tags:
        - presentation - curriculum
      summary: Remove the specified presentation.
      parameters:
        - in: path
          name: presentationId
          schema:
            type: integer
            example: 1
            description: presentation id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "presentation removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                presentation not found:
                  value:
                    message: presentation not found
                  summary: presentation not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "presentation not removed"}
  /api/curriculum/presentation/:
    get:
      tags:
        - presentation - curriculum
      summary: Get all presentations of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: precurriculum_id
          schema:
            type: integer
            example: 1
            description: The professional curriculum id
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Presentation Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found

  /api/curriculum/reference:
    post:
      tags:
        - reference - curriculum
      summary: Creates a reference
      parameters:
        - in: query
          name: reference_name
          schema:
            type: string
            example: Reference example text.
            description: Reference Name.
          required: true

        - in: query
          name: reference_email
          schema:
            type: string
            example: Reference example text.
            description: Reference E-mail.
          required: true

        - in: query
          name: reference_text
          schema:
            type: string
            example: Reference example text.
            description: Reference Text.
          required: true

        - in: query
          name: refcurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                invalid object id:
                  value:
                    message: $objectName is not valid
        '500':
          description: Create error
          content:
            application/json:
              example: {"message": "reference not created"}
  /api/curriculum/reference/{reference__id}:
    put:
      tags:
        - reference - curriculum
      summary: Updates a reference
      parameters:
        - in: path
          name: reference__id
          schema:
            type: integer
            example: 1.
            description: Reference id.
          required: true

        - in: query
          name: reference_name
          schema:
            type: string
            example: Reference example text.
            description: Reference Name.
          required: true

        - in: query
          name: reference_email
          schema:
            type: string
            example: Reference example text.
            description: Reference E-mail.
          required: true

        - in: query
          name: reference_text
          schema:
            type: string
            example: Reference example text.
            description: Reference Text.
          required: true

        - in: query
          name: refcurriculum_id
          schema:
            type: integer
            example: 1
            description: Curriculum id
          required: true
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                reference not found:
                  value:
                    message: reference not found
                  summary: Reference was not found
                invalid object id:
                  value:
                    message: $nomeDoObjeto is not valid
        '500':
          description: Update error
          content:
            application/json:
              example: {"message": "reference not updated"}
  /api/curriculum/reference/{reference_id}:
    get:
      tags:
        - reference - curriculum
      summary: Display the specified Reference.
      parameters:
        - in: path
          name: reference_id
          schema:
            type: integer
            example: 1
            description: reference id
          required: true
      responses:
        '200':
          description: Reference object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                curriculum not found:
                  value:
                    message: curriculum not found
                  summary: Curriculum not found
  /api/curriculum/reference/{referenceId}:
    delete:
      tags:
        - reference - curriculum
      summary: Remove the specified reference.
      parameters:
        - in: path
          name: referenceId
          schema:
            type: integer
            example: 1
            description: reference id
          required: true
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "reference removed"}
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
                  summary: Logged person account professional profile not found
                reference not found:
                  value:
                    message: reference not found
                  summary: reference not found
        '500':
          description: Response message
          content:
            application/json:
              example: {"message": "reference not removed"}
  /api/curriculum/reference/:
    get:
      tags:
        - reference - curriculum
      summary: Get all references of logged professional Curriculum.
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            example: 15
            description: Quantity of results per page
          required: true
        - in: query
          name: refcurriculum_id
          schema:
            type: integer
            example: 1
            description: The professional curriculum id
          required: false
      responses:
        '200':
          description: In this case "data" property contains an array of Reference Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '400':
          description: Invalid parameters
          content:
            application/json:
              examples:
                no professional found:
                  value:
                    message: no professional found
  /api/social_network/showByCompanyId:
    get:
      tags:
        - company_social_network
      summary: Get company social media
      description: Get a company social media by ID
      parameters:
        - name: company_id
          in: query
          description: Company ID
          required: true
          example: 8
          schema:
            type: integer
      responses:
        '200':
          description: Return all CompanySocialMedia objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
        '404':
          description: Social medias not found.
  /api/social_network/store:
    post:
      tags:
        - company_social_network
      summary: Create a new social network
      description: create a new social network to a company
      parameters:
        - name: social_network_profile
          in: query
          description: Link to network profile
          required: true
          example: "www.instagram.com/profile/"
          schema:
            type: string
        - name: company_id
          in: query
          description: Company id
          required: true
          example: 1
          schema:
            type: integer
        - name: social_network_type
          in: query
          description: Type os social network
          required: true
          example: "Instagram"
          schema:
            type: string
      responses:
        '200':
          description: Company social network created sucessfully.
        '404':
          description: An error occurred while creating the social network, please try again later.
  /api/social_network/update:
    post:
      tags:
        - company_social_network
      summary: Update a social network
      description: Update a social network
      parameters:
        - name: social_network_profile
          in: query
          description: Link to network profile
          example: "www.instagram.com/profile/"
          schema:
            type: string
        - name: company_id
          in: query
          description: Company id
          example: 1
          schema:
            type: integer
        - name: social_network_type
          in: query
          description: Type os social network
          example: "Instagram"
          schema:
            type: string
      responses:
          '200':
            description: Company social network updated sucessfully.
          '404':
            description: Company social network not found.
  /api/social_network/destroy:
    post:
        tags:
          - company_social_network
        summary: Delete a company social midia
        description: Delete a specific social midia by ID
        parameters:
          - name: company_social_network
            in: query
            description: Company social network id
            required: true
            example: 8
            schema:
              type: integer
        responses:
          '200':
            description: Company social network deleted sucessfully.
          '404':
            description: Company social network not found.

  /api/proficiency/index:
    get:
        tags:
          - proficiency
        summary: List of proficiencies
        description: Get all the proficiencies
        parameters:
          - name: category
            in: query
            description: Category of the proficiency
            example: seniority
            schema:
              type: string
        responses:
          '200':
            description: A list of proficiencies object array
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Profeciency'
  /api/job_modality/index:
    get:
      tags:
        - Job modality
      description: Get all the jobs modalities
      responses:
        '200':
          description: A list of jobs modalities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job_modalities'
  /api/type_visas/index:
    get:
      tags:
        - type visas
      description: get all the type visas
      responses:
        '200':
          description: A list of type visas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/type_visas'
  
  /api/common_currency/index:
    get:
      tags:
        - commom_currency
      description: get all the common currency
      parameters:
      - name: currency
        in: query
        description: The currency
        example: USD
        schema:
          type: string
      responses:
        '200':
          description: A list of commons currency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/common_currency'
            
  /api/job_applied/jobapplication:
    get:
      tags:
        - job_applied
      description: gets professional job applications
      parameters:
      - name: job_id
        in: query
        description: The joblist id
        example: 1
        schema:
          type: integer
      - name: company_id
        in: query
        description: The company id
        example: 1
        schema:
          type: integer
      - name: status
        in: query
        description: Status to search
        example: applied
        schema:
          type: string
      responses:
        '200':
          description: A list/Array of job applied objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_applied'              
  /api/job_applied/index:
    get:
      tags:
        - job_applied
      description: gets company job applications
      parameters:
      - name: job_id
        in: query
        description: The joblist id
        example: 1
        schema:
          type: integer
      - name: status
        in: query
        description: Status to search
        example: applied
        schema:
          type: string
      responses:
        '200':
          description: A list/Array of job applied objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_applied'
  /api/job_applied/changejobappliedstatus:
    post:
      tags:
        - job_applied
      description: Changes the job applied status | only accesible by persons with a profile of recruiter or company and which owns the job professional applied
      parameters:
      - name: job_applied_id
        in: query
        description: The jobApplied id
        example: 1
        schema:
          type: integer
        required: true
      - name: status
        in: query
        description: Status to search
        example: applied
        schema:
          type: string
        required: true
      responses:
        '200':
          description: Current JobApplied object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_applied_response'
        '400':
          description: No job applied found or invalid status
          content:
            application/json:
              example: {"message": "invalid status"}
        '500':
          description: Job applied status not changed
          content:
            application/json:
              example: {"message": "status not changed"}
  /api/job_applied/status:
    get:
      tags:
        - job_applied
      description: List all possible JobApplied status
      responses:
        '200':
          description: Array of JobApplied status
          content:
            application/json:
              example: [{"applied":"applied", "validating": "validating","refused": "refused","accepted": "accepted"}]
  /api/job_applied/applyforvacancy:
    post:
      tags:
        - job applied
      description: Apply for a job
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: JobApplied object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_applied_response'
        '400':
          description: JobApplied not found
          content:
            application/json:
              example: {"message":"professional already applied for this job | job not found"}
        '500':
          description: JobApplied creation not possible
          content:
            application/json:
              example: {"message":"Failed to create job application"}
  /api/job_applied/canceljobapplied:
    post:
      tags:
        - job_applied
      description: Remove applied from a job
      responses:
        '200':
          description: Array of JobApplied status
          content:
            application/json:
              example: {"message":"job applied removed"}
        '400':
          description: JobApplied not found
          content:
            application/json:
              example: {"message":"no job applied found"}
        '500':
          description: JobApplied removal not possible
          content:
            application/json:
              example: {"message":"an error occured, job applied not removed"}
              
  /api/chat_message/professional/list:
    get:
      tags:
        - chat message
      description: List all messages related to my professional profile
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Array of Chat messages paginated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
  /api/chat_message/company/list:
    get:
      tags:
        - chat_message
      description: List all messages related to my company profile
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Array of Chat messages paginated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
  /api/chat_message/recruiter/list:
    get:
      tags:
        - chat_message
      description: List all messages related to my recruiter profile
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Array of Chat messages paginated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResults'
                
  /api/chat_message/professional/sendmessage:
    post:
      tags:
        - chat_message
      description: Sends a message as my professional profile
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
        - name: attachment
          in: query
          description: Base 64 of an image
          example: base64Image
          schema:
            type: string
        - name: receiverId
          in: query
          description: Receiver object id (either the id of a professional, company, recruiter or person)
          example: 1
          schema:
            type: integer
        - name: receiverType
          in: query
          description: Receiver object type name (either professional, company, recruiter or person)
          example: professional
          schema:
            type: string
      responses:
        '200':
          description: Chat message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_message'
  /api/chat_message/company/sendmessage:
    post:
      tags:
        - chat_message
      description: Sends a message as my company profile
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
        - name: attachment
          in: query
          description: Base 64 of an image
          example: base64Image
          schema:
            type: string
        - name: receiverId
          in: query
          description: Receiver object id (either the id of a professional, company, recruiter or person)
          example: 1
          schema:
            type: integer
        - name: receiverType
          in: query
          description: Receiver object type name (either professional, company, recruiter or person)
          example: professional
          schema:
            type: string
      responses:
        '200':
          description: Chat message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_message'
  /api/chat_message/recruiter/sendmessage:
    post:
      tags:
        - chat message
      description: Sends a message as my recruiter profile
      parameters:
        - name: job_id
          in: query
          description: job id
          example: 1
          schema:
            type: integer
        - name: attachment
          in: query
          description: Base 64 of an image
          example: base64Image
          schema:
            type: string
        - name: receiverId
          in: query
          description: Receiver object id (either the id of a professional, company, recruiter or person)
          example: 1
          schema:
            type: integer
        - name: receiverType
          in: query
          description: Receiver object type name (either professional, company, recruiter or person)
          example: professional
          schema:
            type: string
      responses:
        '200':
          description: Chat message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat_message'
  /api/chat_message/professional/remove:
    delete:
      tags:
        - chat_message
      description: Removes a message sent by my professional profile
      parameters:
        - name: chat_message_id
          in: query
          description: Chat message id
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "chat message removed"}
        '400':
          description: Invalid chat message id
          content:
            application/json:
              example: {"message": "not owner of message"}
        '500':
          description: Removal error
          content:
            application/json:
              example: {"message": "chat message not removed"}
  /api/chat_message/company/remove:
    delete:
      tags:
        - chat_message
      description: Removes a message sent by my company profile
      parameters:
        - name: chat_message_id
          in: query
          description: Chat message id
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "chat message removed"}
        '400':
          description: Invalid chat message id
          content:
            application/json:
              example: {"message": "not owner of message"}
        '500':
          description: Removal error
          content:
            application/json:
              example: {"message": "chat message not removed"}
  /api/chat_message/recruiter/remove:
    delete:
      tags:
        - chat_message
      description: Removes a message sent by my recruiter profile
      parameters:
        - name: chat_message_id
          in: query
          description: Chat message id
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: Response message
          content:
            application/json:
              example: {"message": "chat message removed"}
        '400':
          description: Invalid chat message id
          content:
            application/json:
              example: {"message": "not owner of message"}
        '500':
          description: Removal error
          content:
            application/json:
              example: {"message": "chat message not removed"}
  
  /api/company_types/getcompanytypes:
    get:
      tags:
        - company_types
      description: Get the company types
      parameters:
      - name: name
        in: query
        description: The name to search
        example: contador
        schema:
          type: string
      - name: languageISO
        in: query
        description: One of the official translations (EN, PT or ES) - Default is EN
        example: en
        schema:
          type: string
      responses:
        '200':
          description: A list of type visas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company_types'
components:
  schemas:
    Login:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: person@email.com
        password:
          type: string
          example: MyPassword
        personType:
          type: string
          enum:
            - professional
            - recruiter
            - company
    RegisterPerson:
      required:
        - person_username
        - person_email
        - person_password
        - person_langue
        - person_ddi
        - person_phone
      type: object
      properties:
        person_username:
          type: string
          example: john
        person_email:
          type: string
          example: person@email.com
        person_password:
          type: string
          example: MyPassword
        person_langue:
          type: integer
          example: 1
        person_ddi:
          type: string
          example: 41
        person_phone:
          type: string
          example: 987654321
    LoginWithSuccess:
      type: object
      properties:
        access_token:
          type: string
          example: XAiOiJKV1QiLCJh
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600
        lastLogin:
          type: string
          enum:
            - ''
            - professional
            - recruiter
            - company
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/ProfileTypesMinified'
            
    ChangePassword:
      required:
        - code
        - newPassword
      type: object
      properties:
        code:
          type: string
          example: person@email.com
        newPassword:
          type: string
          example: Password1@
          pattern: /[a-z]/,/[A-Z]/,/[0-9]/,/[@$!%*#?&]/
          description: An uppercase and lowecase character, a number, a special character and more than 6 character length
    PersonObject:
      required:
        - test
      type: object
      properties:
        person_id:
          type: integer
          example: 1
        person_username:
          type: string
          example: john
          maxLength: 300
        email:
          type: string
          example: person@email.com
          maxLength: 200
          uniqueItems: true
        password:
          type: string
          example: MyPassword
          maxLength: 80
          minimum: 6
          pattern: /[a-z]/,/[A-Z]/,/[0-9]/,/[@$!%*#?&]/
          description: An uppercase and lowecase character, a number, a special character and more than 6 character length
        person_ddi:
          type: string
          example: '41'
          maxLength: 10
        person_phone:
          type: string
          example: '999999999'
          maxLength: 20
        person_langue:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    ProfessionalObject:
      required:
        - test
      type: object
      properties:
        professional_id:
          type: integer
          example: 1
        professional_slug:
          type: string
          example: john-woodgate-123141
        professional_email:
          type: string
          example: person@email.com
          maxLength: 200
          uniqueItems: true
        professional_firstname:
          type: string
          example: John
          description: First name of professional
        professional_lastname:
          type: string
          example: Wooddgate
          description: Last name of professional
        professional_phone:
          type: string
          example: '999999999'
          maxLength: 20
        professional_title:
          type: integer
          example: 1
        person_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    DataPersonObject:
      required:
        - test
      type: object
      properties:
        dpperson_id:
          type: integer
          example: 1
        dpdate_of_birth:
          type: string
          example: 2024-01-01
        dpgender:
          type: integer
          example: 1
        dpcity_id:
          type: integer
          example: 1
        dpstate_id:
          type: integer
          example: 1
        dppostal_code:
          type: string
          example: '83700333'
        dpcountry_id:
          type: integer
          example: 1
        dpprofes_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    CompanyObject:
      required:
        - test
      type: object
      properties:
        company_id:
          type: integer
          example: 1
        company_slug:
          type: string
          example: 2024-01-01
        company_register_number:
          type: integer
          example: 1
        company_name:
          type: integer
          example: 1
        company_type:
          type: integer
          example: 1
        company_logo:
          type: string
          example: '83700333'
        company_cover_photo:
          type: integer
          example: 1
        company_video:
          type: integer
          example: 1
        company_phone:
          type: integer
          example: 1
        company_website:
          type: integer
          example: 1
        company_description:
          type: integer
          example: 1
        company_number_employees:
          type: integer
          example: 1
        company_benefits:
          type: integer
          example: 1
        paying:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    RecruiterObject:
      required:
        - test
      type: object
      properties:
        data:
          type: integer
          example: 1
        company_id:
          type: integer
          example: 1
        paying:
          type: integer
          example: 1
        recruiter_photo:
          type: string
          example: base64Image OR null
        person_id:
          type: integer
          example: 1
        profile_id:
          type: integer
          example: 1
        profile_type_id:
          type: integer
          example: 1
        profile_type:
          type: string
          example: recruiters
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    JobList:
      required:
        - test
      type: object
      properties:
        job_id:
          type: integer
          example: 1
        company_id:
          type: integer
          example: 1
        job_modality_id:
          type: integer
          example: 1
          description: id from job_modalities
        job_country:
          type: integer
          example: 1
        job_city:
          type: integer
          example: 1
        job_seniority:
          type: integer
          example: 1
          description: Proficiency id of category = seniority
        job_salary:
          type: number
          example: 2500.00
        job_description:
          type: string
          example: Job description
        job_english_level:
          type: integer
          example: 1
        experience_in_months:
          type: integer
          example: 10
        job_experience_description:
          type: string
          example: worked for apple and google
        job_benefits:
          type: string
          example: gym pass and udemy course pass
        skills:
          type: array
          items:
            $ref: '#/components/schemas/JobSkills'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/JobLanguages'
        visas:
          type: array
          items:
            $ref: '#/components/schemas/JobVisas'
        match:
          type: number
          example: 100.00
          description: The float/double number of the match accordingly to sent parameters | This exists only in /api/joblist/show/{joblistId}
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Curriculum:
      required:
        - test
      type: object
      properties:
        curriculum_id:
          type: integer
          example: 1
        cprofes_id:
          type: integer
          example: 1
        clengua_id:
          type: integer
          example: 1
        curriculum_type:
          type: string
          example: info OR file
        curriculum_file:
          type: string
          example: base64File OR null
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Link:
      required:
        - test
      type: object
      properties:
        link_id:
          type: integer
          example: 1
        curriculum_id:
          type: integer
          example: 1
        link_type:
          type: string
          example: yotube
        url:
          type: string
          example: https://youtube.com
        cprofes_id:
          type: integer
          example: 1
        clengua_id:
          type: integer
          example: 1
        curriculum_type:
          type: string
          example: file | info
        curriculum_file:
          type: string
          example: base64File | null
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Education:
      required:
        - test
      type: object
      properties:
        education_id:
          type: integer
          example: 1
        edcurriculum_id:
          type: integer
          example: 1
        eddegree:
          type: string
          example: Analista de sistemas
        degree_type:
          type: integer
          example: 1
          description: DegreeType id
        edfield_of_study:
          type: integer
          example: 1
          description: AreaOfStudy id
        edinstitution:
          type: string
          example: Faculdade Positivo
        edstart_date:
          type: string
          example: 2020-02-02
        edend_date:
          type: string
          example: 2021-02-02
        eddescription:
          type: string
          example: Estudei diagramas e etc...
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        name:
          type: string
          example: doctoral
          description: The degree type name
        area_of_study_en:
          type: string
          example: engineering
          description: The area of study english translation
        area_of_study_pt:
          type: string
          example: Engenharia
          description: The area of study portuguese translation
        area_of_study_es:
          type: string
          example: ingeniería
          description: The area of study spanish translation
        degree_type_en:
          type: string
          example: doctoral
          description: The degree type english translation
        degree_type_pt:
          type: string
          example: doutorado
          description: The degree type english portuguese translation
        degree_type_es:
          type: string
          example: doctorado
          description: The degree type english spanish translation
    Experience:
      required:
        - test
      type: object
      properties:
        experience_id:
          type: integer
          example: 1
        excurriculum_id:
          type: integer
          example: 1
        exjob_title:
          type: string
          example: Analista de sistemas
        excompany_name:
          type: string
          example: Bosh
        exstart_date:
          type: string
          example: 2020-02-02
        exend_date:
          type: string
          example: 2021-02-02
        exdescription:
          type: string
          example: Criei o sistema...
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Reference:
      required:
        - test
      type: object
      properties:
        reference_id:
          type: integer
          example: 1
        refcurriculum_id:
          type: integer
          example: 1
        reference_name:
          type: string
          example: Design do google
        reference_email:
          type: string
          example: glassdoor@gmail.com
        refrelationship:
          type: string
          example: Glass Door
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Certification:
      required:
        - test
      type: object
      properties:
        certifi_id:
          type: integer
          example: 1
        cercurriculum_id:
          type: integer
          example: 1
        certification_name:
          type: string
          example: Sistemas de informação
        cerissuing_organization:
          type: string
          example: Universidade Positivo
        cerissue_date:
          type: string
          example: 2020-02-02 00:00:00
        cert_hours:
          type: integer
          example: 10
        cerdescription:
          type: string
          example: Desenvolvimento e criação de sistemas
        cerlink:
          type: string
          example: https://www.link.com
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Presentation:
      required:
        - test
      type: object
      properties:
        presentation_id:
          type: integer
          example: 1
        precurriculum_id:
          type: integer
          example: 1
        presentation_text:
          type: string
          example: Olá, sou o Bob
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Skill:
      required:
        - test
      type: object
      properties:
        skill_id:
          type: integer
          example: 1
        skcurriculum_id:
          type: integer
          example: 1
        skill_name:
          type: integer
          example: 1
          description: Tag id
        skproficiency_level:
          type: integer
          example: 1
          description: Proficiency id
        experience_level:
          type: number
          example: 50.50
          description: Float from 0 until 100
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Visa:
      required:
        - test
      type: object
      properties:
        visas_id:
          type: integer
          example: 1
          description: Visa id
        vicurriculum_id:
          type: integer
          example: 1
          description: Curriculum id
        vicountry_id:
          type: integer
          example: 1
          description: Country id
        visa_type:
          type: integer
          example: 1
          description: Visa type id
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    JobSkills:
      required:
        - test
      type: object
      properties:
        job_skill_id:
          type: integer
          example: 1
          description: job skill id
        joblist_id:
          type: integer
          example: 1
          description: JobList id
        tag_id:
          type: integer
          example: 1
          description: Tag id
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    JobVisas:
      required:
        - test
      type: object
      properties:
        job_visa_id:
          type: integer
          example: 1
          description: Job visa id
        joblist_id:
          type: integer
          example: 1
          description: Job list id
        visas_type_id:
          type: integer
          example: 1
          description: Type visa id
        country_id:
          type: integer
          example: 1
          description: List country id
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    JobLanguages:
      required:
        - test
      type: object
      properties:
        job_language_id:
          type: integer
          example: 1
          description: job language id
        joblist_id:
          type: integer
          example: 1
          description: Job list id
        language_id:
          type: integer
          example: 1
          description: List language id
        proficiency_id:
          type: integer
          example: 1
          description: Proficiency id of category = language
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Profeciency:
      required:
        - test
      type: object
      properties:
        proficiency_id:
          type: integer
          example: 1
        proficiency_level:
          type: string
          example: senior
        category:
          type: string
          example: seniority
          description: Either 'language', 'seniority' or 'level'
        weight:
          type: number
          example: 50.0
          description: Only exist on profeciencies of category = level
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        en:
          type: string
          example: senior
          description: English translation
        pt:
          type: string
          example: senior
          description: Portuguese translation
        es:
          type: string
          example: sénior
          description: Spanish translation
        unofficial_translations:
          type: string
          example: {"fr": "french", "it": "italian"}
          description: It can be Array|Null, default is null, it can contain any translation with the key as a languageIso
    Language:
      required:
        - test
      type: object
      properties:
        lang_id:
          type: integer
          example: 1
        lacurriculum_id:
          type: integer
          example: 1,
          description: Curriculum id
        lalangue_id:
          type: integer
          example: 1
          description: ListLang id
        laspeaking_level:
          type: integer
          example: 1
          description: Proficiency id of category = 'language'
        lalistening_level:
          type: integer
          example: 1
          description: Proficiency id of category = 'language'
        lawriting_level:
          type: integer
          example: 1
          description: Proficiency id of category = 'language'
        lareading_level:
          type: integer
          example: 1
          description: Proficiency id of category = 'language'
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    Professional:
      required:
        - test
      type: object
      properties:
        professional_id:
          type: integer
          example: 1
        person_id:
          type: integer
          example: 1
        professional_slug:
          type: string
          example: john-carson-1915185
          description: The slug of professional
        professional_firstname:
          type: string
          example: John
          description: The first name of professional
        professional_lastname:
          type: string
          example: Carson
          description: The last name of professional
        professional_email:
          type: string
          example: professional@gmail.com
          description: Professional email
        professional_phone:
          type: string
          example: +5541954646565
          description: Professional phone
        professional_photo:
          type: string
          example: base64-img
          description: Professional photo image enconded as base64
        professional_cover:
          type: string
          example: base64-img
          description: Professional cover image enconded as base64
        paying:
          type: integer
          example: 0
          description: If account is on a plan (paying user)
        currently_working:
          type: integer
          example: 0
          description: If currently working
        avaliable_to_travel:
          type: integer
          example: 1
          description: Avaliability to travel
        dpdate_of_birth:
          type: string
          example: 2020-01-01 00:00:00
          description: Date of birth
        dpgender:
          type: integer
          example: 1
          description: Gender id
        dpcity_id:
          type: integer
          example: 1
          description: Gender id
        dpstate_id:
          type: integer
          example: 1
          description: ListState id
        dppostal_code:
          type: string
          example: 95959559-9
          description: Postal code
        dpcountry_id:
          type: integer
          example: 1
          description: ListCountry id
        skills:
          type: array
          description: Professional skills array
          items:
            $ref: '#/components/schemas/Skill'
        visas:
          type: array
          description: Professional skills array
          items:
            $ref: '#/components/schemas/Visa'
        languages:
          type: array
          description: Professional languages array
          items:
            $ref: '#/components/schemas/Language'
        match:
          type: number
          description: The porcentage value of match (0 to 100%)
          example: 100.00
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    ProfessionalPaginated:
      required:
        - test
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Professional'
        curent_page:
          type: integer
          example: 1
          description: the current page
        last_page:
          type: integer
          example: 1
          description: the last page
        per_page:
          type: integer
          example: 100
          description: the default list max size
    JobListPaginated:
      required:
        - test
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/JobList'
        curent_page:
          type: integer
          example: 1
          description: the current page
        last_page:
          type: integer
          example: 1
          description: the last page
        per_page:
          type: integer
          example: 100
          description: the default list max size
    JobListShow:
      required:
        - test
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/JobList'
        message:
          type: string
          example: job found successfully | job created successfully | job updated successfully
    PaginatedResults:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: string
          example: An array of object data
        first_page_url:
          type: string
          example: Url
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 2
        last_page_url:
          type: string
          example: Url or null
        links:
          type: string
          example: {"url": null, "label": "&laquo; Previous","active": false}
          description: Array of object
        next_page_url:
          type: string
          example: Url or null
        path:
          type: string
          example: Url
        per_page:
          type: integer
          example: 100
        prev_page_url:
          type: string
          example: Url OR null
        to:
          type: integer
          example: 3
        total:
          type: integer
          example: 3
    Job_modalities:
      type: object
      properties:
        job_modalities_id:
          type: integer
          example: 1
        en:
          type: string
          example: remote
        pt:
          type: string
          example: remoto
        es:
          type: string
          example: remota
        description_en:
          type: string
          example: distance work, outside the office or company
        description_pt:
          type: string
          example: trabalho a distancia, fora do escritório ou empresa
        description_es:
          type: string
          example: trabajar de forma remota, fuera de la oficina o empresa
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    type_visas:
      type: object
      properties:
        typevisas_id:
          type: integer
          example: 1
        type_name:
          type: string
          example: schengen visa
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        translation_id:
          type: integer
          example: 1
        en:
          type: string
          example: schengen visa
        pt:
          type: string
          example: visto Schengen
        es:
          type: string
          example: visto Schengen
    common_currency:
      type: object
      properties:
        common_currency_id:
          type: integer
          example: 1
        currency:
          type: string
          example: USD
        currency_symbol:
          type: string
          example: $
        currency_name:
          type: string
          example: us dollar
        en:
          type: string
          example: us dollar
        pt:
          type: string
          example: dólar americano
        es:
          type: string
          example: dólar estadounidense
        unofficial_translations:
          type: string
          example: Null|JsonArray of dynamic 'languageISO' => 'translation'
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    chat_message:
      type: object
      properties:
        chat_message_id:
          type: integer
          example: 1
        message:
          type: string
          example: About the job...
        sender_message_id:
          type: string
          example: 1
        sender_message_table_name:
          type: string
          example: professional
        receiver_message_id:
          type: integer
          example: 1
        receiver_message_table_name:
          type: string
          example: company
        category:
          type: string
          example: message
        job_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        chat_attachment_id:
          type: integer
          example: 1
    job_applied:
      type: object
      properties:
        applied_id:
          type: integer
          example: 1
        job_id:
          type: integer
          example: 1
        professional_id:
          type: integer
          example: 1
        status:
          type: string
          example: validating
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        company_id:
          type: integer
          example: 1
        job_modality_id:
          type: integer
          example: 1
        job_city:
          type: integer
          example: 1
        job_country:
          type: integer
          example: 1
        job_seniority:
          type: integer
          example: 1
        job_salary:
          type: number
          example: 15783.00
        job_description:
          type: string
          example: textile bleaching operator
        job_experience_description:
          type: string
          example: Ut ipsa quia aliquid
        experience_in_months:
          type: integer
          example: 1
        job_benefits:
          type: string
          example: Sit rem reiciendis cupiditate explicabo quidem consequatur enim
        company_slug:
          type: string
          example: job-info-inc-5151
        company_register_number:
          type: string
          example: 42.827.028/0001-47
        company_name:
          type: string
          example: job info inc
        company_type:
          type: integer
          example: 1
    job_applied_response:
      type: object
      properties:
        data:
          type: array
          description: Job applied array
          items:
            $ref: '#/components/schemas/job_applied'
    Profiles:
      type: object
      properties:
        person:
          type: Object
          $ref: '#/components/schemas/PersonObject'
        professional:
          type: Object
          $ref: '#/components/schemas/Professional'
        company:
          type: Object
          $ref: '#/components/schemas/CompanyObject'
        recruiter:
          type: Object
          $ref: '#/components/schemas/RecruiterObject'
    company_types:
      type: object
      properties:
        company_type_id:
          type: integer
          example: 1
        en:
          type: string
          example: accounting
        pt:
          type: string
          example: contabilidade
        es:
          type: string
          example: contabilidad
        unofficial_translations:
          type: string
          example: Null|JsonArray of dynamic 'languageISO' => 'translation'
        created_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
        updated_at:
          type: string
          example: '2024-04-23T14:16:25.000000Z'
    ProfileTypesMinified:
      type: object
      properties:
        professionals:
          type: array
          items:
            type: object
            properties:
              profile_type_id:
                type: integer
                example: 1
              profile_type:
                type: string
                example: professionals
        recruiters:
          type: array
          items:
            type: object
            properties:
              profile_type_id:
                type: integer
                example: 1
              profile_type:
                type: string
                example: recruiters
        companies:
          type: array
          items:
            type: object
            properties:
              profile_type_id:
                type: integer
                example: 1
              profile_type:
                type: string
                example: companies
            
          
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
